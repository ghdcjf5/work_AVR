
LED3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094c  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f6  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000319  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ca  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC = 0b11111111;    //data direct resiter(데이터 방향을 지시하는것)  현재는 내부의 스위치를 선택하여 출력을 하니까 8핀 모두 1로 출력으로 쓰는것(입력으로쓸떄는 버튼스위치)
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;  //초기화를 하기위해 8bit 0(0~7까지의 led꺼놓는것 즉, 두줄은 led를 쓰기위한 초기화 작업
  a2:	15 ba       	out	0x15, r1	; 21
		  */
		
		for(i=0;i<9;i++)
		{
			
			PORTC = (0b11111111>>1) | 0b10000000;
  a4:	3f ef       	ldi	r19, 0xFF	; 255
		}
		
			for(i=0;i<9;i++)
			{
				
				PORTC = (0b11111111>>1) ;
  a6:	2f e7       	ldi	r18, 0x7F	; 127
#include <avr/io.h>
#define F_CPU 16000000L  //16MHz의 크리스탈이 동작하는것을 동기화 시켜주는것? delay를 쓰려면 이 define을 해줘야한다. 16M는 8bit넘어가니까 long으로 변환(L)
#include <util/delay.h>   //delay를 쓸수있도록 include

int main(void)
{
  a8:	99 e0       	ldi	r25, 0x09	; 9
		
		
		for(i=0;i<9;i++)
		{
			
			PORTC = ( PORTC <<1);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	88 0f       	add	r24, r24
  ae:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	53 ec       	ldi	r21, 0xC3	; 195
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	50 40       	sbci	r21, 0x00	; 0
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x18>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x22>
  c0:	00 00       	nop
  c2:	91 50       	subi	r25, 0x01	; 1
		*/
		//프로젝트 스크린도 이와같은 원리
		
		
		
		for(i=0;i<9;i++)
  c4:	91 f7       	brne	.-28     	; 0xaa <main+0xc>
  c6:	99 e0       	ldi	r25, 0x09	; 9
		}
		
		for(i=0;i<9;i++)
		{
			
			PORTC = (PORTC<<1) | 0b00000001;   //or로 +1해도된다. 
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	88 0f       	add	r24, r24
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	53 ec       	ldi	r21, 0xC3	; 195
  d4:	89 e0       	ldi	r24, 0x09	; 9
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	50 40       	sbci	r21, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x38>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x42>
  e0:	00 00       	nop
  e2:	91 50       	subi	r25, 0x01	; 1
			PORTC = ( PORTC <<1);
			_delay_ms(200);
			
		}
		
		for(i=0;i<9;i++)
  e4:	89 f7       	brne	.-30     	; 0xc8 <main+0x2a>
  e6:	89 e0       	ldi	r24, 0x09	; 9
		  */
		
		for(i=0;i<9;i++)
		{
			
			PORTC = (0b11111111>>1) | 0b10000000;
  e8:	35 bb       	out	0x15, r19	; 21
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	43 ec       	ldi	r20, 0xC3	; 195
  ee:	59 e0       	ldi	r21, 0x09	; 9
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x52>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x5c>
  fa:	00 00       	nop
  fc:	81 50       	subi	r24, 0x01	; 1
			  PORTC = 0b11111111<<(8-i);  //밀어도되고
			  _delay_ms(200);
		  
		  */
		
		for(i=0;i<9;i++)
  fe:	a1 f7       	brne	.-24     	; 0xe8 <main+0x4a>
 100:	89 e0       	ldi	r24, 0x09	; 9
		}
		
			for(i=0;i<9;i++)
			{
				
				PORTC = (0b11111111>>1) ;
 102:	25 bb       	out	0x15, r18	; 21
 104:	9f ef       	ldi	r25, 0xFF	; 255
 106:	43 ec       	ldi	r20, 0xC3	; 195
 108:	59 e0       	ldi	r21, 0x09	; 9
 10a:	91 50       	subi	r25, 0x01	; 1
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	50 40       	sbci	r21, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x6c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x76>
 114:	00 00       	nop
 116:	81 50       	subi	r24, 0x01	; 1
			
			PORTC = (0b11111111>>1) | 0b10000000;
			_delay_ms(200);
		}
		
			for(i=0;i<9;i++)
 118:	a1 f7       	brne	.-24     	; 0x102 <main+0x64>
 11a:	c6 cf       	rjmp	.-116    	; 0xa8 <main+0xa>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
