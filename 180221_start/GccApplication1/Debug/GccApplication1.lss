
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000896  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e3  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1e c0       	rjmp	.+60     	; 0xd8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define F_CPU 16000000L  //16MHz의 크리스탈이 동작하는것을 동기화 시켜주는것? delay를 쓰려면 이 define을 해줘야한다.
#include <util/delay.h>   //delay를 쓸수있도록 include
int main(void)
{
    unsigned int i;
	DDRC = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
  a2:	85 bb       	out	0x15, r24	; 21
	/* Replace with your application code */
    while (1)   //while로 무한반복을 시켜줌으로써 다른 메모리용량을 사용하지 못하게 해줘야한다. 임베디드에서는 특히 더 중시해야한다.
    {
		for(i=0;i<10;i++)
		{
			PORTC = 0b111111111 >> i;
  a4:	4f ef       	ldi	r20, 0xFF	; 255
  a6:	51 e0       	ldi	r21, 0x01	; 1
	
	
	/* Replace with your application code */
    while (1)   //while로 무한반복을 시켜줌으로써 다른 메모리용량을 사용하지 못하게 해줘야한다. 임베디드에서는 특히 더 중시해야한다.
    {
		for(i=0;i<10;i++)
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTC = 0b111111111 >> i;
  ac:	9a 01       	movw	r18, r20
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x18>
  b2:	35 95       	asr	r19
  b4:	27 95       	ror	r18
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x14>
  ba:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	39 e6       	ldi	r19, 0x69	; 105
  c0:	68 e1       	ldi	r22, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	60 40       	sbci	r22, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x24>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x2e>
  cc:	00 00       	nop
	
	
	/* Replace with your application code */
    while (1)   //while로 무한반복을 시켜줌으로써 다른 메모리용량을 사용하지 못하게 해줘야한다. 임베디드에서는 특히 더 중시해야한다.
    {
		for(i=0;i<10;i++)
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	8a 30       	cpi	r24, 0x0A	; 10
  d2:	91 05       	cpc	r25, r1
  d4:	59 f7       	brne	.-42     	; 0xac <main+0xe>
  d6:	e8 cf       	rjmp	.-48     	; 0xa8 <main+0xa>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
